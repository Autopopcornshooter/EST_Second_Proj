server:
  address: 0.0.0.0
  port: 8080

spring:
  profiles:
    active: prod
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_SECRET_PW}
            redirect-uri: "https://3.37.159.17.nip.io:8080/login/oauth2/code/google"
            scope:
              - email
              - profile
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

  google:
    maps:
      api:
        key: ${GOOGLE_MAPS_API_KEY}

  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:your_db_name}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none   # 개발 환경에서는 update, 운영은 validate 혹은 none
    show-sql: false

aws:
  access-key-id: ${ACCESS_KEY}
  secret-access-key:  ${SECRET_KEY}
  region: ap-northeast-2
  s3:
    bucket-name:  ${BUCKET_NAME}
